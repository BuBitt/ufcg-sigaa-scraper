#!/bin/bash

# UFCG SIGAA Scraper - Script de Execu√ß√£o
# Este script facilita a execu√ß√£o do scraper com diferentes op√ß√µes

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir header
show_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    UFCG SIGAA Scraper v2.0                  ‚ïë"
    echo "‚ïë                     Arquitetura Modular                     ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    echo -e "${YELLOW}Verificando depend√™ncias...${NC}"
    
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}‚ùå Python 3 n√£o encontrado!${NC}"
        exit 1
    fi
    
    if [ ! -f ".env" ]; then
        echo -e "${RED}‚ùå Arquivo .env n√£o encontrado!${NC}"
        echo -e "${YELLOW}üí° Crie o arquivo .env com suas credenciais${NC}"
        exit 1
    fi
    
    if [ ! -d "venv" ] && [ ! -d ".venv" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Ambiente virtual n√£o encontrado${NC}"
        echo -e "${BLUE}üí° Recomendamos usar um ambiente virtual${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Depend√™ncias verificadas${NC}"
}

# Fun√ß√£o para executar o scraper
run_scraper() {
    echo -e "${BLUE}üöÄ Iniciando SIGAA Scraper...${NC}"
    echo -e "${YELLOW}üìù Logs ser√£o salvos em script.log${NC}"
    echo
    
    python3 main.py
    
    if [ $? -eq 0 ]; then
        echo
        echo -e "${GREEN}‚úÖ Execu√ß√£o conclu√≠da com sucesso!${NC}"
    else
        echo
        echo -e "${RED}‚ùå Erro durante a execu√ß√£o${NC}"
        echo -e "${YELLOW}üìù Verifique os logs em script.log para mais detalhes${NC}"
        exit 1
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes do projeto
show_info() {
    echo -e "${BLUE}üìã Informa√ß√µes do Projeto:${NC}"
    echo "‚Ä¢ Vers√£o: 2.0.0"
    echo "‚Ä¢ Arquitetura: Modular"
    echo "‚Ä¢ Python: $(python3 --version 2>/dev/null || echo 'N√£o encontrado')"
    echo "‚Ä¢ Estrutura:"
    echo "  ‚îú‚îÄ‚îÄ src/core/           - N√∫cleo da aplica√ß√£o"
    echo "  ‚îú‚îÄ‚îÄ src/services/       - Servi√ßos especializados" 
    echo "  ‚îú‚îÄ‚îÄ src/notifications/  - Sistema de notifica√ß√µes"
    echo "  ‚îú‚îÄ‚îÄ src/utils/          - Utilit√°rios"
    echo "  ‚îî‚îÄ‚îÄ src/config/         - Configura√ß√µes"
    echo
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo -e "${BLUE}üÜò Ajuda - UFCG SIGAA Scraper${NC}"
    echo
    echo "Uso: $0 [OP√á√ÉO]"
    echo
    echo "Op√ß√µes:"
    echo "  run        Executa o scraper (padr√£o)"
    echo "  check      Verifica depend√™ncias"
    echo "  info       Mostra informa√ß√µes do projeto"
    echo "  logs       Mostra os √∫ltimos logs"
    echo "  clean      Limpa cache e logs"
    echo "  help       Mostra esta ajuda"
    echo
    echo "Exemplos:"
    echo "  $0          # Executa o scraper"
    echo "  $0 run      # Executa o scraper" 
    echo "  $0 check    # Verifica se tudo est√° configurado"
    echo "  $0 logs     # Mostra os logs mais recentes"
    echo
}

# Fun√ß√£o para mostrar logs
show_logs() {
    if [ -f "script.log" ]; then
        echo -e "${BLUE}üìã √öltimos logs:${NC}"
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        tail -20 script.log
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        echo -e "${YELLOW}üí° Arquivo completo: script.log${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Arquivo de log n√£o encontrado${NC}"
        echo -e "${BLUE}üí° Execute o scraper primeiro para gerar logs${NC}"
    fi
}

# Fun√ß√£o para limpar cache
clean_cache() {
    echo -e "${YELLOW}üßπ Limpando cache e logs...${NC}"
    
    # Remove cache Python
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    find . -name "*.pyc" -delete 2>/dev/null || true
    
    # Remove logs antigos
    [ -f "script.log" ] && rm script.log
    
    echo -e "${GREEN}‚úÖ Cache limpo!${NC}"
}

# Main
main() {
    show_header
    
    case "${1:-run}" in
        "run")
            check_dependencies
            run_scraper
            ;;
        "check")
            check_dependencies
            echo -e "${GREEN}‚úÖ Tudo configurado corretamente!${NC}"
            ;;
        "info")
            show_info
            ;;
        "logs")
            show_logs
            ;;
        "clean")
            clean_cache
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida: $1${NC}"
            echo
            show_help
            exit 1
            ;;
    esac
}

main "$@"
