#!/usr/bin/env python3
"""
Script de teste para verificar a configura√ß√£o do m√©todo de extra√ß√£o.
"""

import os
import sys
import config
from utils.file_handler import load_env

def test_extraction_method():
    """Testa a configura√ß√£o do m√©todo de extra√ß√£o."""
    
    print("üîß Testando configura√ß√£o do m√©todo de extra√ß√£o...")
    
    # Carregar .env se existir
    try:
        load_env()
        print("‚úÖ Arquivo .env carregado")
    except FileNotFoundError:
        print("‚ö†Ô∏è  Arquivo .env n√£o encontrado, usando configura√ß√µes padr√£o")
    
    # Verificar m√©todo configurado
    method = config.EXTRACTION_METHOD
    print(f"üìä M√©todo configurado: {method}")
    
    if method.lower() == "menu_ensino":
        print("‚úÖ Usando m√©todo Menu Ensino (recomendado)")
        print("   - Mais r√°pido e direto")
        print("   - Acessa via menu Ensino > Consultar Minhas Notas")
    elif method.lower() == "materia_individual":
        print("‚úÖ Usando m√©todo Mat√©ria Individual")
        print("   - M√©todo original")
        print("   - Acessa cada mat√©ria separadamente")
    else:
        print(f"‚ö†Ô∏è  M√©todo inv√°lido '{method}', ser√° usado 'menu_ensino' por padr√£o")
    
    # Verificar outras configura√ß√µes relevantes
    print(f"\nüîç Outras configura√ß√µes:")
    print(f"   - Headless: {config.HEADLESS_BROWSER}")
    print(f"   - Timeout: {config.TIMEOUT_DEFAULT}ms")
    print(f"   - Cache: {config.CACHE_FILENAME}")
    
    # Verificar vari√°veis de ambiente
    env_method = os.getenv("EXTRACTION_METHOD")
    if env_method:
        print(f"   - EXTRACTION_METHOD definido: {env_method}")
    else:
        print("   - EXTRACTION_METHOD n√£o definido (usando padr√£o)")
    
    print("\n‚úÖ Teste de configura√ß√£o conclu√≠do!")
    return method

if __name__ == "__main__":
    test_extraction_method()
